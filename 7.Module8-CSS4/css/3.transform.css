/* All styles */

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

header {
    background-color: #777;
    color: #eee;
    font-weight: bold;
    line-height: 50px;
    border-bottom: 1px solid #444;
    border-radius: 0 0 20px 20px;
    text-align: center;
}


/* Main */


/* box in general */

.box {
    width: 200px;
    height: 150px;
    margin: 50px;
    padding: 20px;
    box-shadow: 0 0 10px #ccc;
    display: flex;
    align-items: center;
    justify-content: center;
    /* The property of element transfor it it has any of that property - it makes the transform property of element to be executed in the speified time. */
    transition: transform 0.5s;
}


/* Transfor play */

.transform:hover {
    /* except the degrees we can use also the other units for exzmple */
    /* degrees */
    transform: rotate(45deg);
    /* turn - tells to the element what part of cilcle the element should be rotated eg */
    transform: rotate(0.25turn);
    /* transfor origin here tlls to the element where will be the center of rotation */
    /* eg */
    /* The units in here can be used % 0r pixels as well px */
    transform-origin: right top;
    /* for shifting object we can use such a property as */
    /* firsr value right/-left when using '-' and the second value -top/bottom using '-' as well */
    transform: translate(25px, -40px);
    /* There is a possible to use many transform in one property but the queue does matters what will be executed first  we can use % etc*/
    transform: rotate(20deg) translate(-10px, 25px);
    /* we can scaling the element as we want to irst value = horizontal second value - vertical */
    transform: scale(2, 3);
    /* skew - pochyenie first parameter horizontal, second parameter vertical */
    transform: skew(20deg, 30deg);
}


/* matrix transformation is more advancced - read about it */


/* Rubic's Cube */

h2 {
    margin: 20px;
    text-align: center;
}


/* div cube */


/* cube in gegneral */

.cube {
    width: 200px;
    height: 200px;
    margin: 100px;
    position: relative;
    /* perspective shows the view from a distance */
    perspective: 1000px;
    /* chahnge the angle view  first value - bottom/top, second value left/right*/
    perspective-origin: 250% 250%;
    /* Responsible for timind and display 3d */
    transition: 3s transform;
    transform-style: preserve-3d;
}

.cube:hover {
    /* In 3d 1par = x, 2 par = y, 3par = z, 4 par the quantity of degrees */
    /* rotateZ is defined and equal = rotate */
    transform: rotate3d(12, 5, 7, 720deg) translate3d(100px, 100px, 100px);
    /* We can also translate the cube in 3d */
    /* transform: translate3d(5%, 35px, 100px); */
}


/* walls */

.wall {
    backface-visibility: hidden;
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    position: absolute;
    width: 100%;
    height: 100%;
    /* Wall should be pushed of half of our orginal width */
    transform: translateZ(100px);
}


/* items */

.item {
    border: 2px solid #000;
}


/* colors */

.yellow {
    background-color: #ffff00;
}

.red {
    background-color: #ff0000;
    /* now ove and rotate our wall */
    transform: rotateY(-90deg) translateZ(100px);
}

.blue {
    background-color: #0000ff;
    transform: rotateY(90deg) translateZ(100px);
}

.orange {
    background-color: #ff4500;
    transform: rotateY(-180deg) translateZ(100px);
}

.green {
    background-color: #008000;
    transform: rotateX(-90deg) translateZ(100px);
}

.white {
    background-color: #fff;
    transform: rotateX(90deg) translateZ(100px);
}